#pragma kernel Init
#pragma kernel WaterInc
#pragma kernel UpdateFluxMap
#pragma kernel UpdateWaterHeight
#pragma kernel UpdateVelocityField
#pragma kernel Erosion
#pragma kernel Transportation
#pragma kernel Evaporation

struct WaterSourceStruct
{
    float strength;
    int radius;
    int2 pos;
};

RWTexture2D<float4> dataMap1; // r = heightMap, g = suspended sediment, b = water level
RWTexture2D<float4> fluxMap; // pipe model flux field | r = left, g = top, b = right, a = bottom
RWTexture2D<float4> velocityField; // velocity field
RWTexture2D<float4> waterDeltaMap; // r = delta1, g = delta2, b = sedimentDelta

RWStructuredBuffer<WaterSourceStruct> waterSources;
int numWaterSources;

uint dimensionX;
uint dimensionY;
float simulationTimeStep = 0.01;
float pipeCrossSection = 1.0;
float lengthPipe = 1.0;
float gravity = 9.81;
float evaporationConst = 0.1;
float minAlpha = 0.17;
float sedimentTransportConst = 1.0;
float dissolvingConst = 0.5;
float depositionConst = 0.5;

float deltaHeight(uint2 id, int2 offset)
{
    return dataMap1[id.xy].r + waterDeltaMap[id.xy].r - dataMap1[id.xy + offset].r - waterDeltaMap[id.xy + offset].r;
}

bool createCircle(uint2 uv, WaterSourceStruct waterSource) {
    int dist = distance((int2)uv, waterSource.pos);
    dist = abs(dist);
    return dist <= waterSource.radius;
}

float GetSteepness(uint2 id)
{
    float dx = dataMap1[uint2(id.x + 1, id.y)].r - dataMap1[id.xy].r;
    float dy = dataMap1[uint2(id.x, id.y + 1)].r - dataMap1[id.xy].r;

    return sqrt(dx * dx + dy * dy);
}

float3 GetHeightMapNormal(uint2 id)
{
    // TODO: fix border
    float3 normal = float3(2.0 * (dataMap1[int2(id.x + 1, id.y)].r - dataMap1[int2(id.x - 1, id.y)].r), 2.0 * (dataMap1[int2(id.x, id.y - 1)].r - dataMap1[int2(id.x, id.y + 1)].r), -4.0);
    return normalize(normal);
}

[numthreads(8,8,1)]
void Init (uint3 id : SV_DispatchThreadID)
{
    dataMap1[id.xy] = float4(dataMap1[id.xy].r, 0, 0, 1);
    waterDeltaMap[id.xy] = float4(0, 0, 0, 0);
    velocityField[id.xy] = float4(0, 0, 0, 0);
    fluxMap[id.xy] = float4(0, 0, 0, 0);
}

[numthreads(8,8,1)]
void WaterInc (uint3 id : SV_DispatchThreadID)
{
    // TODO: rain simulation
    float waterDelta1 = dataMap1[id.xy].b;
    
    for (int i = 0; i < numWaterSources; i++)
    {
        if (createCircle(id.xy, waterSources[i]))
        {
            waterDelta1 += simulationTimeStep * waterSources[i].strength;
        }
    }

    waterDeltaMap[id.xy] = float4(waterDelta1, waterDeltaMap[id.xy].gba);
}

// outflow from cell (x, y) to neighbours
[numthreads(8,8,1)]
void UpdateFluxMap (uint3 id : SV_DispatchThreadID)
{
    float fluxL = 0;
    float fluxR = 0;
    float fluxT = 0;
    float fluxB = 0;
    
    if (id.x > 0)
    {
        fluxL = max(0.0, fluxMap[id.xy].r + simulationTimeStep * pipeCrossSection * (gravity * deltaHeight(id.xy, int2(-1, 0)) / lengthPipe));
    }
    
    if (id.x < dimensionX - 1)
    {
        fluxR = max(0.0, fluxMap[id.xy].b + simulationTimeStep * pipeCrossSection * (gravity * deltaHeight(id.xy, int2(1, 0)) / lengthPipe));
    }
    
    if (id.y < dimensionY - 1)
    {
        fluxT = max(0.0, fluxMap[id.xy].g + simulationTimeStep * pipeCrossSection * (gravity * deltaHeight(id.xy, int2(0, 1)) / lengthPipe));
    }
     
    if (id.y > 0)
    {
        fluxB = max(0.0, fluxMap[id.xy].a + simulationTimeStep * pipeCrossSection * (gravity * deltaHeight(id.xy, int2(0, -1)) / lengthPipe));
    }

    float k = min(1.0, (waterDeltaMap[id.xy].r * lengthPipe) / ((fluxL + fluxR + fluxB + fluxT) * simulationTimeStep));

    fluxMap[id.xy] = float4(k * fluxL, k * fluxT, k * fluxR, k * fluxB);
}

[numthreads(8,8,1)]
void UpdateWaterHeight (uint3 id : SV_DispatchThreadID)
{
    // TODO: consider and fix border cells with neighbours outside the grid

    // inflow flux from neighbours to cell (x, y)
    float flowInR = 0;
    if (id.x < dimensionX - 1)
    {
        flowInR = fluxMap[id.xy + int2(1, 0)].r;
    }

    float flowInL = 0;
    if (id.x > 0)
    {
        flowInL = fluxMap[id.xy + int2(-1, 0)].b;
    }

    float flowInT = 0;
    if (id.y < dimensionY - 1)
    {
        flowInT = fluxMap[id.xy + int2(0, 1)].a;
    }

    float flowInB = 0;
    if (id.y > 0 )
    {
        flowInB = fluxMap[id.xy + int2(0, -1)].g;
    }

    float flowIn = flowInR + flowInB + flowInL + flowInT;
    float flowOut = fluxMap[id.xy].r + fluxMap[id.xy].g + fluxMap[id.xy].b + fluxMap[id.xy].a;
    
    float deltaVolume = simulationTimeStep * (flowIn - flowOut);
    
    float waterDelta2 = waterDeltaMap[id.xy].r + deltaVolume / lengthPipe;
    
    waterDeltaMap[id.xy] = float4(waterDeltaMap[id.xy].r, waterDelta2, waterDeltaMap[id.xy].ba);
}

[numthreads(8,8,1)]
void UpdateVelocityField (uint3 id : SV_DispatchThreadID)
{
    float flowInR = 0;
    if (id.x < dimensionX - 1)
    {
        flowInR = fluxMap[id.xy + int2(1, 0)].r;
    }

    float flowInL = 0;
    if (id.x > 0)
    {
        flowInL = fluxMap[id.xy + int2(-1, 0)].b;
    }

    float flowInT = 0;
    if (id.y < dimensionY - 1)
    {
        flowInT = fluxMap[id.xy + int2(0, 1)].a;
    }

    float flowInB = 0;
    if (id.y > 0)
    {
        flowInB = fluxMap[id.xy + int2(0, -1)].g;
    }
    
    // Velocity field
    float averageWaterDelta = (waterDeltaMap[id.xy].r + waterDeltaMap[id.xy].g) / 2.0;
    float deltaFlowX = (flowInL - fluxMap[id.xy].r + fluxMap[id.xy].b - flowInR) / 2.0;
    float deltaFlowY = (flowInT - fluxMap[id.xy].g + fluxMap[id.xy].a - flowInB) / 2.0;
    
    velocityField[id.xy] =  float4(deltaFlowX / (averageWaterDelta * lengthPipe), deltaFlowY / (averageWaterDelta * lengthPipe), 0, 1);
}

[numthreads(8,8,1)]
void Erosion (uint3 id : SV_DispatchThreadID)
{
    float alpha = acos(GetHeightMapNormal(id.xy).z);
    float velocity = abs(velocityField[id.xy].r) + abs(velocityField[id.xy].g); // TODO: The fuck is wrong with you
    alpha = max(alpha, minAlpha);
    velocity = max(velocity, 0.1);
    
    float capacity = sedimentTransportConst * sin(alpha) * velocity;
    //float capacity = sedimentTransportConst * sin(alpha) * velocity;

    float sedimentDelta;
    float newHeight = dataMap1[id.xy].r;
    if (capacity > dataMap1[id.xy].g)
    {
        // dissolve
        newHeight = dataMap1[id.xy].r - dissolvingConst * (capacity - dataMap1[id.xy].g);
        newHeight = max(newHeight, 0.0);
        //dataMap1[id.xy] = float4(0, dataMap1[id.xy].gba);
        sedimentDelta = dataMap1[id.xy].g + dissolvingConst * (capacity - dataMap1[id.xy].g);
    }
    else
    {
        // deposition
        newHeight = dataMap1[id.xy].r + depositionConst * (dataMap1[id.xy].g - capacity);
        dataMap1[id.xy] = float4(dataMap1[id.xy].r, dataMap1[id.xy].gba);
        sedimentDelta = dataMap1[id.xy].g - depositionConst * (dataMap1[id.xy].g - capacity);
    }

    //dataMap1[id.xy] = float4(newHeight, dataMap1[id.xy].gba);
    waterDeltaMap[id.xy] = float4(waterDeltaMap[id.xy].rg, sedimentDelta, waterDeltaMap[id.xy].a);
}

[numthreads(8,8,1)]
void Transportation (uint3 id : SV_DispatchThreadID)
{
    // TODO: fix border
    int x = id.x - velocityField[id.xy].r * simulationTimeStep;
    int y = id.y - velocityField[id.xy].g * simulationTimeStep;
    float sediment = waterDeltaMap[int2(x, y)].b;
    sediment = max(sediment, 0.0);
    dataMap1[id.xy] = float4(dataMap1[id.xy].r, sediment, dataMap1[id.xy].ba);
}

[numthreads(8,8,1)]
void Evaporation (uint3 id : SV_DispatchThreadID)
{
    float water = waterDeltaMap[id.xy].g * (1.0 - evaporationConst * simulationTimeStep);
    water = max(water, 0.0);
    dataMap1[id.xy] = float4(dataMap1[id.xy].rg, water, 1);
}