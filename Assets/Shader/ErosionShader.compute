#pragma kernel Init
#pragma kernel WaterInc
#pragma kernel FlowSimulation
#pragma kernel Evaporation

struct WaterSourceStruct
{
    float strength;
    int radius;
    int2 pos;
};

RWTexture2D<float4> dataMap1; // r = heightMap, g = suspended sediment, b = water level
RWTexture2D<float4> fluxMap; // pipe model flux field | r = left, g = top, b = right, a = bottom
RWTexture2D<float4> velocityField; // velocity field
RWTexture2D<float4> waterDeltaMap; // r = delta1, g = delta2

RWStructuredBuffer<WaterSourceStruct> waterSources;
int numWaterSources;

uint2 dimensions = uint2(2048, 2048);
float simulationTimeStep = 0.01;
float pipeCrossSection = 1.0;
float lengthPipe = 1.0;
float gravity = 9.81;
float evaporationConst = 0.1;

float deltaHeight(uint2 id, int2 offset)
{
    return dataMap1[id.xy].r + waterDeltaMap[id.xy].r - dataMap1[id.xy + offset].r - waterDeltaMap[id.xy + offset].r;
}

// outflow from cell (x, y) to neighbours
void UpdateFluxField(uint3 id)
{
    float fluxL = 0;
    float fluxR = 0;
    float fluxT = 0;
    float fluxB = 0;
    
    if (id.x > 0)
    {
        fluxL = max(0.0, fluxMap[id.xy].r + simulationTimeStep * pipeCrossSection * (gravity * deltaHeight(id.xy, int2(-1, 0)) / lengthPipe));
    }
    
    if (id.x < dimensions.x - 1)
    {
        fluxR = max(0.0, fluxMap[id.xy].b + simulationTimeStep * pipeCrossSection * (gravity * deltaHeight(id.xy, int2(1, 0)) / lengthPipe));
    }
    
    if (id.y > 0)
    {
        fluxT = max(0.0, fluxMap[id.xy].g + simulationTimeStep * pipeCrossSection * (gravity * deltaHeight(id.xy, int2(0, 1)) / lengthPipe));
    }
     
    if (id.y < dimensions.y - 1)
    {
        fluxB = max(0.0, fluxMap[id.xy].a + simulationTimeStep * pipeCrossSection * (gravity * deltaHeight(id.xy, int2(0, -1)) / lengthPipe));
    }

    float k = min(1.0, (waterDeltaMap[id.xy].r * lengthPipe) / ((fluxL + fluxR + fluxB + fluxT) * simulationTimeStep));

    fluxMap[id.xy] = float4(k * fluxL, k * fluxT, k * fluxR, k * fluxB);
}

bool createCircle(uint2 uv, WaterSourceStruct waterSource) {
    int dist = distance((int2)uv, waterSource.pos);
    dist = abs(dist);
    return dist <= waterSource.radius;
}

[numthreads(8,8,1)]
void Init (uint3 id : SV_DispatchThreadID)
{
    dataMap1[id.xy] = float4(dataMap1[id.xy].r, 0, 0, 1);
    waterDeltaMap[id.xy] = float4(0, 0, 0, 0);
}

[numthreads(8,8,1)]
void WaterInc (uint3 id : SV_DispatchThreadID)
{
    // TODO: rain simulation
    
    for (int i = 0; i < numWaterSources; i++)
    {
        if (createCircle(id.xy, waterSources[i]))
        {
            float waterDelta1 = dataMap1[id.xy].b + simulationTimeStep * waterSources[i].strength;
            waterDeltaMap[id.xy] = float4(waterDelta1, waterDeltaMap[id.xy].gba);
        }
    }
}

[numthreads(8,8,1)]
void FlowSimulation (uint3 id : SV_DispatchThreadID)
{
    // TODO: consider and fix border cells with neighbours outside the grid
    
    // Flux field
    UpdateFluxField(id);

    // inflow flux from neighbours to cell (x, y)
    float flowInR = 0;
    if (id.x < dimensions.x - 1)
    {
        flowInR = fluxMap[id.xy + int2(1, 0)].r;
    }

    float flowInL = 0;
    if (id.x > 0)
    {
        flowInL = fluxMap[id.xy + int2(-1, 0)].b;
    }

    float flowInT = 0;
    if (id.y > 0)
    {
        flowInT = fluxMap[id.xy + int2(0, 1)].a;
    }

    float flowInB = 0;
    if (id.y < dimensions.y - 1)
    {
        flowInB = fluxMap[id.xy + int2(0, -1)].g;
    }
    
    float deltaVolume = simulationTimeStep * (
        (flowInL + flowInT + flowInR + flowInB)
        - (fluxMap[id.xy].r + fluxMap[id.xy].g + fluxMap[id.xy].b + fluxMap[id.xy].a));

    float flowIn = flowInR + flowInB + flowInL + flowInT;
    float flowOut = fluxMap[id.xy].r + fluxMap[id.xy].g + fluxMap[id.xy].b + fluxMap[id.xy].a;
    float waterDelta2 = waterDeltaMap[id.xy].r + flowIn * simulationTimeStep / lengthPipe;
    waterDeltaMap[id.xy] = float4(waterDeltaMap[id.xy].r, waterDelta2, flowIn, waterDeltaMap[id.xy].a);

    // Velocity field
    float averageWaterDelta = (waterDeltaMap[id.xy].r + waterDelta2) / lengthPipe;
    float deltaFlowX = (flowInR - fluxMap[id.xy].r + fluxMap[id.xy].b - flowInL) / lengthPipe;
    float deltaFlowY = (flowInT - fluxMap[id.xy].a + fluxMap[id.xy].g - flowInB) / lengthPipe;
    
    velocityField[id.xy] =  float4(deltaFlowX / (averageWaterDelta * lengthPipe), deltaFlowY / (averageWaterDelta * lengthPipe), 0, 1);
}

[numthreads(8,8,1)]
void Evaporation (uint3 id : SV_DispatchThreadID)
{
    dataMap1[id.xy] = float4(dataMap1[id.xy].rg, waterDeltaMap[id.xy].g * (1 - evaporationConst * simulationTimeStep), 1);
}